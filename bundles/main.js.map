{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./src/render.ts","webpack:///./src/dots.ts","webpack:///./src/index.ts"],"sourcesContent":["/**\n * @module render\n * \n * This module contains functions for asynchronusly drawing\n * to each of the canvases\n */\n\nimport { CanvasInstance, FrameCallback } from './index.d';\n\nlet _canvases: Array<CanvasInstance> = [];\n\n\n\n/**\n * @name get_relative_pos\n * @description gets the relative position of the mouse in\n * a canvas instance.\n * @param {CanvasInstance} - The canvas \n * @param {MouseEvent} \n * @returns {[number, number]} - The Relative position on the canvas\n */\nexport const get_relative_pos = (\n canvas: CanvasInstance,\n e: MouseEvent,\n): [number, number] => {\n // -- Get the canvas position\n const canvas_pos = canvas.canvas.getBoundingClientRect();\n\n // -- Return the relative position\n return [\n e.clientX - canvas_pos.x,\n e.clientY - canvas_pos.y\n ];\n}\n\n\n\n/**\n * @name add_canvas\n * @description adds a canvas to the list of canvases\n * @param {number} frame_rate the frame rate to draw at\n * @param {CanvasRenderingContext2D} ctx the canvas to add\n * @param {(ctx: CanvasRenderingContext2D) => void} draw_callback the callback to call when the canvas has been cleared\n * and is ready to be drawn to\n * @returns {CanvasInstance}\n */\nexport const add_canvas = (\n frame_rate: number,\n ctx: CanvasRenderingContext2D, \n draw_callback: (ctx: CanvasRenderingContext2D) => void\n): CanvasInstance => {\n let frame_callbacks = [];\n\n const canvas_obj: CanvasInstance = {\n canvas: ctx.canvas,\n ctx,\n draw_callback,\n last_frame_time: 0,\n frame_rate,\n real_frame_rate: 0,\n\n frame_callbacks,\n add_frame_callback: (cb) => {\n // -- Create the FrameCallback object\n const fc: FrameCallback = {\n func: cb,\n remove: () => {\n const index = frame_callbacks.indexOf(fc);\n if (index > -1) frame_callbacks.splice(index, 1);\n }\n }\n\n // -- Add the callback to the array\n frame_callbacks.push(fc);\n\n // -- Return the FrameCallback\n return fc;\n }\n };\n\n _canvases.push(canvas_obj);\n return canvas_obj;\n}\n\n\n\n/**\n * @name start_draw\n * @description draws to all of the canvases\n * @returns {void}\n */\nexport async function start_draw(): Promise<void> {\n // -- Loop through each of the canvases\n _canvases.forEach(canvas => {\n\n // -- Get the current time\n const current_time = performance.now();\n\n // -- Calculate the time elapsed since the last frame\n const elapsed_time = current_time - canvas.last_frame_time;\n\n // -- Calculate the real frame rate\n canvas.real_frame_rate = 1000 / elapsed_time;\n\n // -- Check if the frame rate has been reached\n if (elapsed_time < 1000 / canvas.frame_rate) return;\n\n // -- Clear the canvas\n canvas.ctx.save();\n canvas.ctx.setTransform(1, 0, 0, 1, 0, 0);\n canvas.ctx.clearRect(0, 0, canvas.canvas.width, canvas.canvas.height);\n canvas.ctx.restore();\n\n // -- Call the draw callback\n canvas.draw_callback(canvas.ctx);\n\n // -- Call the frame callbacks\n canvas.frame_callbacks.forEach((cb) => cb.func());\n\n // -- Update the last frame time\n canvas.last_frame_time = current_time;\n });\n\n // -- Call the draw function again\n requestAnimationFrame(start_draw);\n}\n\n\n\n/**\n * @name animate\n * @description This function enables smooth animation on a canvas by \n * utilizing the `real_frame_rate` of the `CanvasInstance` object. It \n * allows you to create custom animations that progress over time.\n * @param {Function} callback - A function that gets called at each animation step with the updated progress (ranging from 0.0 to 1.0).\n * @param {CanvasInstance} ci - The canvas on which the animation will take place.\n * @param {number} ms - The duration of the animation in milliseconds.\n */\nexport const animate = async (\n callback: (anim_time: number) => void,\n ci: CanvasInstance,\n ms: number\n) => {\n const startTime = performance.now();\n let animTime = 0;\n\n return new Promise<void>((resolve) => {\n // -- Create the FrameCallback\n const fc = ci.add_frame_callback(() => frame());\n\n // -- Func to progress the animation\n const frame = () => {\n const currentTime = performance.now();\n const elapsedTime = currentTime - startTime;\n animTime = elapsedTime / ms;\n\n // -- Check if were done the animation\n if (elapsedTime >= ms) {\n callback(1.0);\n fc.remove()\n resolve();\n } \n \n // -- Continue animating\n else callback(animTime);\n };\n\n });\n};\n\n\n\n/**\n * @name set_opacity\n * @description sets the opacity of a hex color\n * @param {string} hex the hex color to set the opacity of\n * @param {number} opacity the opacity to set\n * @returns {string} the new hex color\n */\nexport const set_opacity = (hex: string, opacity: number): string => {\n const parse_hex = (hex: string) => {\n // -- Remove the hash\n hex = hex.replace('#', '');\n\n // -- Get the r, g, b values\n const r = parseInt(hex.substring(0, 2), 16);\n const g = parseInt(hex.substring(2, 4), 16);\n const b = parseInt(hex.substring(4, 6), 16);\n\n // -- Return the values\n return { r, g, b };\n }\n\n // -- Parse the hex color\n const { r, g, b } = parse_hex(hex);\n\n // -- Return the new hex color\n return `#${r.toString(16)}${g.toString(16)}${b.toString(16)}${opacity}`;\n}","import { CanvasInstance, Dots, Dot } from './index.d';\nimport { get_relative_pos } from './render';\n\n\n\n/**\n * @name render_dots\n * @description renders the dots to the canvas\n * @param {CanvasInstance} ci the canvas instance to render to\n * @param {Dots} dots the dots to render\n * @param {MouseEvent} e the mouse event to use for the mouse position\n * @param {number} [x_o=0] the x coordinate to start rendering at\n * @param {number} [y_o=0] the y coordinate to start rendering at\n */\nexport const render_dots = (\n ci: CanvasInstance, \n dots: Dots,\n e: MouseEvent = null,\n x_o: number = 0,\n y_o: number = 0\n): void => {\n\n // -- Get the mouse position\n let mouse_pos: [number, number] = [-5000, -5000];\n if (e !== null) mouse_pos = get_relative_pos(ci, e);\n\n ci.ctx.beginPath();\n ci.ctx.arc(mouse_pos[0], mouse_pos[1], 10, 0, 2 * Math.PI);\n ci.ctx.fill();\n\n // -- Loop through each row\n for (let row = 0; row < dots.rows; row++) {\n\n // -- Loop through each column\n for (let col = 0; col < dots.cols; col++) {\n\n // -- Calculate the x and y coordinates\n let x = (col * dots.dot_size) + (col * dots.dot_spacing) + x_o,\n y = (row * dots.dot_size) + (row * dots.dot_spacing) + y_o;\n\n // -- Calculate the distance\n const dist = get_dist_from_mouse(mouse_pos, x, y);\n let size = dots.dot_size;\n\n // -- Push the dot away from the mouse\n if (dist < dots.force_size)\n [x, y] = push_dot(mouse_pos, x, y, dist, dots.force_size, dots.force);\n\n // -- Check if the distance is greater than the max distance\n if (dist < dots.max_dist) {\n // -- Calculate the size of the dot\n const capped_dist = Math.min(dist, dots.max_dist),\n norm_dist = (capped_dist / dots.max_dist) - 1;\n\n // -- Calc the size, if 100, then 1, if 0, then 2\n size = dots.dot_size + (norm_dist * dots.dot_size);\n }\n \n\n // -- Draw the dot\n ci.ctx.fillStyle = dots.color;\n \n // -- Circle\n ci.ctx.beginPath();\n ci.ctx.arc(x, y, size / 2, 0, 2 * Math.PI);\n ci.ctx.fill();\n }\n }\n};\n\n\n\n\n/**\n * @name get_dist_from_mouse\n * @description gets the distance from the mouse to a dot\n * @param {[number, number]} mouse_pos the mouse position\n * @param {number} x the x coordinate of the dot\n * @param {number} y the y coordinate of the dot\n * @returns {number} the distance from the mouse to the dot\n */\nexport const get_dist_from_mouse = (\n mouse_pos: [number, number],\n x: number,\n y: number,\n): number => {\n\n // -- Calculate the distance\n const dist = Math.sqrt(\n Math.pow(mouse_pos[0] - x, 2) + \n Math.pow(mouse_pos[1] - y, 2)\n );\n\n // -- Return the distance\n return dist;\n}\n\n\n\n/**\n * @name push_dot\n * @description pushes a dot away from the mouse, sortof like\n * a circular repulsion\n * @param {[number, number]} mouse_pos the mouse position\n * @param {number} x the x coordinate of the dot\n * @param {number} y the y coordinate of the dot\n * @param {number} dist the distance from the mouse to the dot\n * @param {number} max_dist the maximum distance to push the dot away (if the distance is greater than this, then the dot will not be pushed)\n * @param {number} [force=1] the force to push the dot away with\n * @returns {[number, number]} the new x and y coordinates of the dot\n */\nexport const push_dot = (\n mouse_pos: [number, number],\n x: number,\n y: number,\n dist: number,\n max_dist: number = 100,\n force: number = 1\n): [number, number] => {\n\n // -- If the distance is greater than the max distance, then return the original coordinates\n if (dist > max_dist) return [x, y];\n\n // -- Calculate the angle\n const angle = Math.atan2(mouse_pos[1] - y, mouse_pos[0] - x);\n\n // -- How much force to apply (the closer the mouse is, the more force to apply)\n force = force * (1 - (dist / max_dist));\n\n // -- Calculate the new x and y coordinates\n const new_x = x - (Math.cos(angle) * force),\n new_y = y - (Math.sin(angle) * force);\n\n // -- Return the new coordinates\n return [new_x, new_y];\n}","import { render_dots } from './dots';\nimport { Dots } from './index.d';\nimport { add_canvas, start_draw } from './render';\n\n// -- Attempt to get the canvas elements\nconst main_canvas = document.getElementById('main-canvas') as HTMLCanvasElement;\n\n// -- Check if the canvas elements exist\nif (!main_canvas) \n throw new Error('One ore more Canvas elements were not found');\n\n// -- Get the canvas contexts\nconst main_context = main_canvas.getContext('2d');\n\n// -- Set the canvas contexts to be the same size as the canvas\nexport const update_canvas_size = (): void => {\n main_context.canvas.width = main_canvas.offsetWidth;\n main_context.canvas.height = main_canvas.offsetHeight;\n main_context.scale(1, 1);\n};\n\n\n// -- DEV\nconst dots: Dots = {\n rows: 10,\n cols: 50,\n\n dot_size: 5,\n dot_spacing: 15,\n\n force: 25,\n force_size: 100,\n\n max_dist: 50,\n color: '#fff'\n}\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n // -- We need to wait for the dom to load before we can do anything\n // with styles as it could be that the styles are not loaded yet\n console.log('DOM Loaded');\n update_canvas_size();\n\n let mouse_event: MouseEvent = null;\n document.addEventListener('mousemove', (e) => mouse_event = e);\n\n\n // -- Add the canvases to the draw loop\n const mc = add_canvas(120, main_context, (ctx) => {\n\n // -- Get the width and height of the dots grid\n const width = dots.cols * dots.dot_size + (dots.cols * dots.dot_spacing),\n height = dots.rows * dots.dot_size + (dots.rows * dots.dot_spacing);\n\n // -- Calculate the x and y coordinates\n const x = (ctx.canvas.width / 2) - (width / 2),\n y = (ctx.canvas.height / 2) - (height / 2);\n\n render_dots(mc, dots, mouse_event, x, y);\n });\n\n // -- Start the animation loop\n start_draw();\n});"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_canvases","start_draw","_start_draw","_callee2","_context2","canvas","current_time","performance","now","elapsed_time","last_frame_time","real_frame_rate","frame_rate","ctx","save","setTransform","clearRect","width","height","restore","draw_callback","frame_callbacks","cb","func","requestAnimationFrame","get_dist_from_mouse","mouse_pos","x","y","Math","sqrt","pow","push_dot","dist","max_dist","force","angle","atan2","cos","sin","main_canvas","document","getElementById","main_context","getContext","dots","rows","cols","dot_size","dot_spacing","force_size","color","addEventListener","console","log","offsetWidth","offsetHeight","scale","mouse_event","e","canvas_obj","mc","ci","x_o","y_o","canvas_pos","getBoundingClientRect","clientX","clientY","get_relative_pos","beginPath","arc","PI","fill","row","col","size","_push_dot2","_slicedToArray","norm_dist","min","fillStyle","render_dots","add_frame_callback","fc","remove","index","indexOf","splice"],"sourceRoot":""}